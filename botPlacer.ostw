import "./Vars/Global.ostw";
import "./Vars/Player.ostw";
import "./Macros/hostPlayer.ostw";
rule: "▒【Bot Placement Module (Adapted from TPEGO by Provoxin)】▒"
{}
void BotCreate() "【 Subroutine 】▒▒  BotCreate  ▒▒"
{
            CreateDummyBot(
                HP().nextBotHero,
                HP().nextBotTeam,
                -1,
                placementPositionHP()
                , null);
        
}
define remainingSlots(Team team): NumberOfSlots(team) - CountOf(AllPlayers(team));
define ensureTeamHasOpenSlot(Team team): remainingSlots(team) > 0 ? team : remainingSlots(OppositeTeamOf(team)) > 0 ? OppositeTeamOf(team) : Team.All;
rule: "Create bot"
if (inEdit())
if(HP().hostSelectedTarget == false)
if(HP().hostHoverTarget == false)
if (btnHeld(Button.PrimaryFire))
{
    HP().placementDistance = 12;
    if(remainingSlots(HP().nextBotTeam) <= 0 && remainingSlots(OppositeTeamOf(HP().nextBotTeam)) > 0) {
        HP().fullTeam = HP().nextBotTeam;
        HP().nextBotTeam = OppositeTeamOf(HP().nextBotTeam);
        if(remainingSlots(HP().nextBotTeam) > 0) {
            SmallMessage(HP(), <"<0> is Full Swapping to <1>", HP().fullTeam, HP().nextBotTeam>);
        }
    }
    if(remainingSlots(HP().nextBotTeam) > 0) {
        CreateDummyBot(
                HP().nextBotHero,
                HP().nextBotTeam,
                -1,
                placementPositionHP()
                , DirectionTowards(placementPositionHP(), eyePositionHP()));
        
        HP().targetedDummy = LastCreatedEntity();
        WaitUntil(HP().targetedDummy.initialize == true, 3);
        HP().nextBotHero = FilteredArray(RandomValueInArray(AllHeroes()), ArrayElement() != HP().nextBotHero);
    }
    else {
       SmallMessage(HP(), <"Both Teams Are Full!", HP().fullTeam, HP().nextBotTeam>);
    }
    updateSelectionArray();
}

rule: "onHover Selection Entity"
if (inEdit())
if(HP().selectionArray != EmptyArray())
if(selectionEntitiesInLOS() != EmptyArray())
if(HP().hostSelectedTarget == false)
if(selectionArrayUpdating == false)
{
    HP().hostHoverTarget = HP().hostSelectedTarget == true ? HP().hostSelectedTarget : hoverTargetHP();
    MinWait();
    LoopIfConditionIsTrue();
}

rule: "Grab Hover Target"
if (inEdit())
if(HP().hostHoverTarget == true)
if(HP().botMoveButtonLocked == false)
if(btnHeld(Button.SecondaryFire) == true )
{
    HP().hostSelectedTarget = HP().hostHoverTarget;
    HP().placementDistance = DistanceBetween(EyePosition(HP()), HP().hostHoverTarget);
    if(HP().hostSelectedTarget[2] == EntityType.DummyBot) {
      SetGravity(HP().hostSelectedTarget[1], 0);
      StopForcingPlayerPosition(HP().hostSelectedTarget[1]);
      StartForcingPlayerPosition(HP().hostSelectedTarget[1],
      HP().hostSelectedTarget[1] == EvaluateOnce(HP().hostSelectedTarget[1]) ? UpdateEveryFrame(placementPositionHP()) : EvaluateOnce(HP().hostSelectedTarget[1]).botForcedPosition, true);
    }
    MinWait();
    updateSelectionArray();

    
}
// define rateOfChange():  AbsoluteValue(VerticalFacingAngleOf(HP()) * 2 / 120);
rule: "Update Range"
if(btnHeld(Button.SecondaryFire) == true )
if(btnHeld(Button.Ability2) == true || btnHeld(Button.Ultimate) == true )
if (inEdit()) {
  HP().placementDistance =  btnHeld(Button.Ultimate) == true && btnHeld(Button.Ability2) == false ? HP().placementDistance -  0.250 : btnHeld(Button.Ultimate) == false && btnHeld(Button.Ability2) == true ? HP().placementDistance + 0.250 : HP().placementDistance;
  MinWait();
  LoopIfConditionIsTrue();
}

rule: "Lock Ultimate"
if(btnHeld(Button.SecondaryFire) == true )
if(btnHeld(Button.Ultimate) == true )
if(HP().botTeamButtonLocked == false)
{
  HP().botTeamButtonLocked = true;
  WaitUntil(btnHeld(Button.Ultimate) == false, 3);
  HP().botTeamButtonLocked = false;
}



rule: "Drop Selected Target"
if(btnHeld(Button.SecondaryFire) == false )
if (inEdit())
if(HP().hostSelectedTarget == true)
{
    if(HP().hostSelectedTarget[2] == EntityType.DummyBot) {
      HP().hostSelectedTarget[1].botForcedPosition = placementPositionHP();
      StartForcingPlayerPosition(HP().hostSelectedTarget[1], HP().hostSelectedTarget[1].botForcedPosition, false);
      HP().hostSelectedTarget[1].botLookPosition = EyePosition(HP().hostSelectedTarget[1]) + DirectionTowards(EyePosition(HP().hostSelectedTarget[1]), HP().hostSelectedTarget[1].botLookPosition) * 3; 
    } else {
        HP().hostSelectedTarget[1].botLookPosition = placementPositionHP();
    }
    HP().hostHoverTarget = HP().hostSelectedTarget;
    HP().hostSelectedTarget = null;
    MinWait();
    updateSelectionArray();
    
}

rule: "Swap Bot Teams"
if (inEdit())
if(btnHeld(Button.Ultimate) == true )
if(btnHeld(Button.SecondaryFire) == false )
if(HP().hostHoverTarget == true)
if(HP().hostHoverTarget[2] == EntityType.DummyBot)
if(HP().hostSelectedTarget == false)
if(HP().botTeamButtonLocked == false)
{
    HP().botTeamButtonLocked = true;
    if(remainingSlots(OppositeTeamOf(TeamOf(HP().hostHoverTarget[1]))) > 0) {
      HP().botTeamSwapData = [
        HeroOf(HP().hostHoverTarget[1]),
        OppositeTeamOf(TeamOf(HP().hostHoverTarget[1])),
        PositionOf(HP().hostHoverTarget[1]),
        EyePosition(HP().hostHoverTarget[1]) + FacingDirectionOf(HP().hostHoverTarget[1]) * 3,
        SlotOf(HP().hostHoverTarget[1]),
        TeamOf(HP().hostHoverTarget[1])
      ];
      MinWait();
      DestroyDummyBot(HP().botTeamSwapData[5], HP().botTeamSwapData[4]); 
      Wait(.250);
      CreateDummyBot(
                HP().botTeamSwapData[0],
                HP().botTeamSwapData[1],
                -1,
                HP().botTeamSwapData[2]
                , HP().botTeamSwapData[3]);
        HP().targetedDummy = LastCreatedEntity();
        WaitUntil(HP().targetedDummy.initialize == true, .100);
        HP().targetedDummy.botForcedPosition = HP().botTeamSwapData[2];
        HP().targetedDummy.botLookPosition = HP().botTeamSwapData[3];
        updateSelectionArray();
    }
    else {
        SmallMessage(HP(), <"<0> is FUll!", OppositeTeamOf(TeamOf(HP().hostHoverTarget[1]))>);
    }
    WaitUntil(btnHeld(Button.Ultimate) == false, 3);
     HP().botTeamSwapData = null;
     updateSelectionArray();
     HP().botTeamButtonLocked = false;
     
}

rule: "Remove Bot"
if (inEdit())
if(btnHeld(Button.Melee) == true )
if(HP().hostHoverTarget == true)
if(HP().hostHoverTarget[2] == EntityType.DummyBot)
if(HP().hostSelectedTarget == false)
if(HP().removeBotButtonLocked == false)
{
    HP().removeBotButtonLocked = true;
    DestroyDummyBot(TeamOf(HP().hostHoverTarget[1]), SlotOf(HP().hostHoverTarget[1]));
    MinWait();
    updateSelectionArray();
    HP().removeBotButtonLocked = false;
}
void  SetBotSwapData() "【 Subroutine 】▒▒ SetBotSwapData" {
    HP().targetedDummy = HP().hostHoverTarget[1];
    HP().botSwapHeroData = [
        HeroOf(HP().targetedDummy),
        TeamOf(HP().targetedDummy),
        HP().targetedDummy.botForcedPosition,
        HP().targetedDummy.botLookPosition,
        SlotOf(HP().targetedDummy)
        ];
}
void  SetHostHeroSwapData() "【 Subroutine 】▒▒ SetHostHeroSwapData" {
    HP().hostSwapHeroData = [HeroOf(HP()), PositionOf(HP()), FacingDirectionOf(HP())];
}

void handleResettingHostHero() "【 Subroutine 】▒▒ handleResettingHostHero" {
    ForcePlayerHero(HP(), HP().hostSwapHeroData[0]);
    WaitUntil(hasSpawnedHP() == true, .250);
    Teleport(HP(), HP().hostSwapHeroData[1]);
    SetFacing(HP(), HP().hostSwapHeroData[2]);
    StopForcingHero(HP());
}
void handleBotsHeroChange() "【 Subroutine 】▒▒ handleBotsHeroChange" {

  MinWait();
  CreateDummyBot(
    Hero: HP().botSwapHeroData[0],
    Team: HP().botSwapHeroData[1],
    Slot: HP().botSwapHeroData[4],
    Position: HP().botSwapHeroData[2],
    Facing: DirectionTowards(HP().botSwapHeroData[2], HP().botSwapHeroData[3])
  );
  HP().targetedDummy = LastCreatedEntity();
  WaitUntil(HP().targetedDummy.initialize == true, 1);
  HP().targetedDummy.botForcedPosition = HP().botSwapHeroData[2];
  HP().targetedDummy.botLookPosition = HP().botSwapHeroData[3];
  updateSelectionArray();
}
void  SwapHostAndBotHero() "【 Subroutine 】▒▒ SwapHostAnyBotHero" {
    SetBotSwapData();
    SetHostHeroSwapData();
    SetAllowedHeroes(HP(), FilteredArray(AllHeroes(), ArrayElement() != HeroOf(HP())));
    DestroyDummyBot(HP().botSwapHeroData[1], HP().botSwapHeroData[4]);
    Wait(.5);
    updateSelectionArray();
    ResetHeroAvailability(HP());
    WaitUntil(HasSpawned(HP()), 9999);
    HP().botSwapHeroData[0] = HeroOf(HP());
    PreloadHero(HP(), HP().hostSwapHeroData[0]);
    MinWait();
    handleResettingHostHero();
    handleBotsHeroChange();
}

rule: "Swap Bot Hero"
if (inEdit())
if(HP().botChangeHeroButtonLocked == false)
if(btnHeld(Button.Reload) == true )
if(HP().hostHoverTarget == true)
if(HP().hostSelectedTarget == false)
if(HP().hostHoverTarget[2] == EntityType.DummyBot)
{
    HP().botChangeHeroButtonLocked = true;
    SwapHostAndBotHero();
    updateSelectionArray();
    HP().hostHoverTarget = null;
    HP().selectedTarget = null;
    WaitUntil(btnHeld(Button.Reload) == false, 3);
    HP().botChangeHeroButtonLocked = false;
}



