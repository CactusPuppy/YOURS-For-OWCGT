import "../Vars/Global.ostw";
import "../Vars/Player.ostw";
import "../SelectionEntityClass.ostw";
define  HP() : HostPlayer();
define isHP() : HP() == EventPlayer();
ModeType HPMode() : HostPlayer().mode;
define btnHeld(Button button) : IsButtonHeld(HP(), button) == true;
define btnNotHeld(Button button) : IsButtonHeld(HP(), button) == false;
define btnOrBtnHeld(Button a, Button b): btnHeld(a) || btnHeld(b);
define btnAndBtnHeld(Button a, Button b): btnHeld(a) && btnHeld(b);
define btnAndNotBtnHeld(Button held, Button notHeld): btnHeld(held) && !btnHeld(notHeld);
define buttonHeldJumpOrCrouch(): btnOrBtnHeld(Button.Crouch, Button.Jump);
define enterEditModeBtns() : btnAndNotBtnHeld(Button.Interact, Button.Ability1);
define enterCameraModeBtns() : btnAndBtnHeld(Button.Interact, Button.Ability1);
define enterNormalModeBtns() : btnHeld(Button.Interact);
define inMode(ModeType mode) : HP().mode == mode;
define modeIsSet() : HP().mode == true; 
define inInitMode() : inMode(ModeType.Init);
define inNormal() : inMode(ModeType.Normal);
define inEdit() : inMode(ModeType.Edit);
define inCamera() : inMode(ModeType.Camera);
define notInMode(ModeType mode) : HP().mode != mode;
define notInNormal() : notInMode(ModeType.Normal);
define notInEdit() : notInMode(ModeType.Edit);
define notCamera() : notInMode(ModeType.Camera);
define menuOpen() : HP().isInMenu;
define existsHP() : EntityExists(HP());

define throttleOfHP() : ThrottleOf(HP());
// define throttleOfIsGreater_EP(define number) : ThrottleOf(EventPlayer());
define velocityOfHP() : VelocityOf(HP());
define speedOfHP() : SpeedOf(HP());
define facingDirectionHP() : FacingDirectionOf(HP());


define speedOfIsGreaterHP(define number) : speedOfHP() > number;

define slotOfHP() : SlotOf(HP());
define pointerEffect(): CreateEffect(inEdit() ? HP() : [], Effect.Sphere, Color.Green, UpdateEveryFrame(RayCastHitPosition(HP().noclipPosition, HP().noclipPosition + FacingDirectionOf(HP()) * HP().placementDistance, AllPlayers(Team.All), HP(), true)), 0.05, EffectRev.VisibleToPositionAndRadius);
define showDropButton() : inEdit() && HP().hostSelectedTarget == true && !btnHeld(Button.Ability1);

define isAliveHP() : IsAlive(HP());
define grabInWorldText() : CreateInWorldText(
    VisibleTo: showDropButton() ? HP() : [], 
    Header: <"<0> DROP", InputBindingString(Button.PrimaryFire)>,
    Position: HP().grabbedBot, 1,
    Clipping: Clipping.DoNotClip, 
    Reevaluation : InworldTextRev.VisibleToPositionAndString,
    TextColor: Color.White,
    Spectators: Spectators.DefaultVisibility
);

define eyePositionHP() : EyePosition(HP());
Vector cameraEyePosition() : eyePositionHP() + facingDirectionHP() * 1.5;
Vector cameraLookPosition() : eyePositionHP() + facingDirectionHP() * 2;


define hasSpawnedHP(): HasSpawned(HP());


define placementPositionHP(): RayCastHitPosition(
            StartPOS: EyePosition(HP()),
            EndPOS: EyePosition(HP()) + facingDirectionHP() * HP().placementDistance,
            PlayersToInclude: null,
            PlayersToExclude: AllPlayers(),
            IncludePlayerOwnedObjects: false
            );
define oscillatePositive(define speed): AbsoluteValue(SineFromRadians(TotalTimeElapsed() * speed));
define hoverIconOffset(define speed = 2) : Vector(0, .500 + (.250 * oscillatePositive(speed)) , 0);

define getTargetType(define target):
  !target ? EntityType.None :
   IsDummyBot(target) ?
     EntityType.DummyBot :
     EntityType.LookOrb;

define onlyHoverTarget(): HP().hostHoverTarget == true && HP().hostSelectedTarget == false;
define hasSelectedTarget(): HP().hostSelectedTarget == true;

define getAllBots():  FilteredArray(AllPlayers(Team.All), ArrayElement() != HP() == true);
define  getSelectionBotArray(): MappedArray(getAllBots(), [PositionOf(ArrayElement()), ArrayElement(), EntityType.DummyBot]);
define  getSelectionLookOrbArray(): MappedArray(getAllBots(), [ArrayElement().botLookPosition, ArrayElement(), EntityType.LookOrb]);

define  setupSelectionArray(): Append(getSelectionBotArray(), getSelectionLookOrbArray());
// define selectionArrayHP(): 

define  getSelectionArray(): FilteredArray(setupSelectionArray(), ArrayElement()[0] == true);

define selectionEntitiesInLOS(): FilteredArray(HP().selectionArray, IsInViewAngle(HP(), ArrayElement()[0], 120) == true && IsInLineOfSight(eyePositionHP(), ArrayElement()[0], BarrierLOS.NoBarriersBlock)   );


define closestSelectionEntity(define vectors) : 
FirstOf(
    FilteredArray(
    SortedArray(
        vectors,
        DotProduct(
            facingDirectionHP(),
            DirectionTowards(ArrayElement()[0], eyePositionHP())
                )
        ),
        DistanceBetween(eyePositionHP() + facingDirectionHP() * DistanceBetween(eyePositionHP(), ArrayElement()), ArrayElement()) <= 5)
    );

define hoverTargetHP(): closestSelectionEntity(selectionEntitiesInLOS());



void SetHostSelectionArray() "【 Subroutine 】▒▒  SetHostSelectionArray  ▒▒"
{
        allBots = getAllBots();
        for (define i = 0; i < CountOf(allBots); i++)
        {
            allBotsSelectionArray[i][0] = PositionOf(allBots[i]);
            allBotsSelectionArray[i][1] = allBots[i];
            allBotsSelectionArray[i][2] = EntityType.DummyBot;
            allLookSelectionArray[i][0] = allBots[i].botLookPosition;
            allLookSelectionArray[i][1] = allBots[i];
            allLookSelectionArray[i][2] = EntityType.LookOrb;
        }
        MinWait();
        HP().selectionArray = Append(allBotsSelectionArray, allLookSelectionArray);
}