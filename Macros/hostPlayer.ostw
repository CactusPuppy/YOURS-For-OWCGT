import "../Vars/Global.ostw";
import "../Vars/Player.ostw";
Player  HP() : HostPlayer();
Boolean isHP() : HP() == EventPlayer();
ModeType HPMode() : HostPlayer().mode;
Boolean btnHeld(Button button) : IsButtonHeld(HP(), button);
Boolean btnNotHeld(Button button) : !IsButtonHeld(HP(), button);
Boolean btnOrBtnHeld(Button a, Button b): btnHeld(a) || btnHeld(b);
Boolean btnAndBtnHeld(Button a, Button b): btnHeld(a) && btnHeld(b);
Boolean btnAndNotBtnHeld(Button held, Button notHeld): btnHeld(held) && !btnHeld(notHeld);
Boolean buttonHeldJumpOrCrouch(): btnOrBtnHeld(Button.Crouch, Button.Jump);
Boolean enterEditModeBtns() : btnAndNotBtnHeld(Button.Interact, Button.Ability1);
Boolean enterCameraModeBtns() : btnAndBtnHeld(Button.Interact, Button.Ability1);
Boolean enterNormalModeBtns() : btnHeld(Button.Interact);
Boolean inMode(ModeType mode) : HP().mode == mode;
Boolean modeIsSet() : HP().mode == true;
Boolean inInitMode() : inMode(ModeType.Init);
Boolean inNormal() : inMode(ModeType.Normal);
Boolean inEdit() : inMode(ModeType.Edit);
Boolean inCamera() : inMode(ModeType.Camera);
Boolean notInMode(ModeType mode) : HP().mode != mode;
Boolean notInNormal() : notInMode(ModeType.Normal);
Boolean notInEdit() : notInMode(ModeType.Edit);
Boolean notCamera() : notInMode(ModeType.Camera);
Boolean existsHP() : EntityExists(HP());

define throttleOfHP() : ThrottleOf(HP());
// define throttleOfIsGreater_EP(define number) : ThrottleOf(EventPlayer());
define velocityOfHP() : VelocityOf(HP());
define speedOfHP() : SpeedOf(HP());
define facingDirectionHP() : FacingDirectionOf(HP());


define speedOfIsGreaterHP(define number) : speedOfHP() > number;

define slotOfHP() : SlotOf(HP());
define pointerEffect(): CreateEffect(inEdit() ? HP() : [], Effect.Sphere, Color.Green, UpdateEveryFrame(RayCastHitPosition(HP().noclipPosition, HP().noclipPosition + FacingDirectionOf(HP()) * HP().placementDistance, AllPlayers(Team.All), HP(), true)), 0.05, EffectRev.VisibleToPositionAndRadius);
define showDropButton() : inEdit() && HP().hostSelectedTarget != EmptyArray() && !btnHeld(Button.Ability1);

define isAliveHP() : IsAlive(HP());
define grabInWorldText() : CreateInWorldText(
    VisibleTo: showDropButton() ? HP() : [],
    Header: <"<0> DROP", InputBindingString(Button.PrimaryFire)>,
    Position: HP().grabbedBot, 1,
    Clipping: Clipping.DoNotClip,
    Reevaluation : InworldTextRev.VisibleToPositionAndString,
    TextColor: Color.White,
    Spectators: Spectators.DefaultVisibility
);

define eyePositionHP() : EyePosition(HP());
Vector cameraEyePosition() : eyePositionHP() + facingDirectionHP() * 1.5;
Vector cameraLookPosition() : eyePositionHP() + facingDirectionHP() * 2;


define hasSpawnedHP(): HasSpawned(HP());


define placementPositionHPRaw(): RayCastHitPosition(
            StartPOS: UpdateEveryFrame(EyePosition(HP())),
            EndPOS: UpdateEveryFrame(EyePosition(HP()) + facingDirectionHP() * HP().placementDistance),
            PlayersToInclude: null,
            PlayersToExclude: AllPlayers(),
            IncludePlayerOwnedObjects: false
            );

define placementPositionHP(): UpdateEveryFrame(RayCastHitPosition(
            StartPOS: UpdateEveryFrame(EyePosition(HP())),
            EndPOS: UpdateEveryFrame(EyePosition(HP()) + facingDirectionHP() * HP().placementDistance),
            PlayersToInclude: null,
            PlayersToExclude: AllPlayers(),
            IncludePlayerOwnedObjects: false
            ));
define oscillatePositive(define speed): AbsoluteValue(SineFromRadians(TotalTimeElapsed() * speed));
define hoverIconOffset(define speed = 2) : Vector(0, .500 + (.250 * oscillatePositive(speed)) , 0);

define getTargetType(define target):
  !target ? EntityType.None :
   IsDummyBot(target) ?
     EntityType.DummyBot :
     EntityType.LookOrb;

define onlyHoverTarget(): HP().hostHoverTarget != EmptyArray() && HP().hostSelectedTarget == EmptyArray();
define hasSelectedTarget(): HP().hostSelectedTarget != EmptyArray();

define getAllBots():  FilteredArray(AllPlayers(Team.All), ArrayElement() != HP() == true && IsAlive(ArrayElement()) && EntityExists(ArrayElement()) == true);
define  getSelectionBotArray(): MappedArray(getAllBots(), [PositionOf(ArrayElement()), ArrayElement(), EntityType.DummyBot]);
define  getSelectionLookOrbArray(): MappedArray(getAllBots(), [ArrayElement().botLookPosition, ArrayElement(), EntityType.LookOrb]);

define  setupSelectionArray(): Append(getSelectionBotArray(), getSelectionLookOrbArray());
// define selectionArrayHP():

define  getSelectionArray(): FilteredArray(setupSelectionArray(), ArrayElement()[0] == true);

define selectionEntitiesInLOS():
FilteredArray(
    HP().selectionArray,
    IsInViewAngle(
     HP(),
     ArrayElement()[0],
     120
    ) == true &&
    IsInLineOfSight(
      eyePositionHP(),
      ArrayElement()[0] +
      Vector(0,0.25,0),
    BarrierLOS.NoBarriersBlock
    ) == true &&
    EntityExists(
     ArrayElement()[1]
    ) == true &&
    IsAlive(
      ArrayElement()[1]
    ) == true
);

define closestSelectionEntity(define vectors) :
FirstOf(
    FilteredArray(
    SortedArray(
        vectors,
        DotProduct(
            facingDirectionHP(),
            DirectionTowards(ArrayElement()[0], eyePositionHP())
                )
        ),
        DistanceBetween(eyePositionHP() + facingDirectionHP() * DistanceBetween(eyePositionHP(), ArrayElement()), ArrayElement()) <= 1.25)
    );

define hoverTargetHP(): notInEdit() || HP().selectionArray == EmptyArray() ? EmptyArray() : closestSelectionEntity(selectionEntitiesInLOS());



void SetHostSelectionArray() "【 Subroutine 】▒▒  SetHostSelectionArray  ▒▒"
{
        allBots = getAllBots();
        HP().selectionArray = EmptyArray();
        for (i = 0; i < CountOf(allBots); i++)
        {
            allBotsSelectionArray[i][0] = PositionOf(allBots[i]) + Vector(0,1,0);
            allBotsSelectionArray[i][1] = allBots[i];
            allBotsSelectionArray[i][2] = EntityType.DummyBot;
            allLookSelectionArray[i][0] = allBots[i].botLookPosition;
            allLookSelectionArray[i][1] = allBots[i];
            allLookSelectionArray[i][2] = EntityType.LookOrb;
        }
        HP().selectionArray = FilteredArray(Append(allBotsSelectionArray, allLookSelectionArray), EntityExists(ArrayElement()[1]) == true);
}

void SaveBotValues() "【 Subroutine 】▒▒  SaveBotValues ▒▒" {
  _bots = FilteredArray(AllPlayers(Team.All), ArrayElement() != HP());
  for (i = 0; i < CountOf(_bots); i++) {
    botSavedValues[i] = [
            _bots[i],
            HeroOf(_bots[i]),
            TeamOf(_bots[i]),
            SlotOf(_bots[i]),
            _bots[i].botForcedPosition == true ? _bots[i].botForcedPosition : PositionOf(_bots[i]),
            _bots[i].botLookPosition
        ];
  }
}

void LoadSavedBotValues() "【 Subroutine 】▒▒  LoadSavedBotValues ▒▒"
{
    for (i = 0; i < CountOf(botSavedValues); i++)
    {
        if(EntityExists(botSavedValues[i][0]) == false || IsDead(botSavedValues[i][0]) ) {
          CreateDummyBot(
              botSavedValues[i][1],
              botSavedValues[i][2],
              botSavedValues[i][3],
              botSavedValues[i][4],
              botSavedValues[i][5]
          );
          botSavedValues[i] =
          [
              LastCreatedEntity(),
              botSavedValues[i][1],
              botSavedValues[i][2],
              botSavedValues[i][3],
              botSavedValues[i][4],
              botSavedValues[i][5]
          ];
        }
    }
    MinWait();
    for (define i = 0; i < CountOf(botSavedValues); i++) {
        botSavedValues[i][0].botForcedPosition = botSavedValues[i][4];
        botSavedValues[i][0].botLookPosition = botSavedValues[i][5];
    }
}
void updateSelectionArray() "updateSelectionArray" {
    MinWait();
    selectionArrayUpdating = true;
    SetHostSelectionArray();
    MinWait();
    selectionArrayUpdating = false;
}
void onEditModeEnter() "onEditModeEnter" {
    MinWait();
    LoadSavedBotValues();
    HP().hostHoverTarget = EmptyArray();
    HP().hostSelectedTarget = EmptyArray();
    selectionArrayUpdating = true;
    SetHostSelectionArray();
    MinWait();
    selectionArrayUpdating = false;
    SmallMessage(HP(), "Edit Mode");
    SetInvisible(HP(), InvisibleTo.None);
}

void onNormalModeEnter() "onNormalModeEnter" {
    MinWait();
    SaveBotValues();
    HP().hostHoverTarget = EmptyArray();
    HP().hostSelectedTarget = EmptyArray();
    SmallMessage(HP(), "Normal Mode");
    SetInvisible(HP(), InvisibleTo.None);
}

void onCameraModeEnter() "onCameraModeEnter" {
    MinWait();
    HP().hostHoverTarget = EmptyArray();
    HP().hostSelectedTarget = EmptyArray();
    SmallMessage(HP(), "Camera Mode");
    SetInvisible(HP(), InvisibleTo.All);
}

