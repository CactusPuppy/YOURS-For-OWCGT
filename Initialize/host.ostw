import "../Vars/Global.ostw";
import "../Vars/Player.ostw";
import "../Macros/hostPlayer.ostw";

define remainingSlotCount() : 12 - CountOf(AllPlayers(Team.All));
define canSeeCusorHudHP() : inEdit() && !HP().isInMenu;
define showHost() : canSeeCusorHudHP() ? HP() : [];
define canSwap(Team team): NumberOfSlots(team) - CountOf(AllPlayers(team)) > 0;
define botOppositeTeam(): OppositeTeamOf(TeamOf(HP().hostHoverTarget[1]));
define topHudCreate() : HP().hostSelectedTarget == false && HP().hostHoverTarget == false && remainingSlotCount() > 0;
define showCreate(): HP().hostSelectedTarget == false && HP().hostHoverTarget == false;
define showMove(): HP().hostSelectedTarget == false && HP().hostHoverTarget == true;
define showRemove() : HP().hostSelectedTarget == false && HP().hostHoverTarget == true && HP().hostHoverTarget[2] == EntityType.DummyBot;
define showSwapTeam() : inEdit() && HP().hostSelectedTarget == false && HP().hostHoverTarget == true && HP().hostHoverTarget[2] == EntityType.DummyBot && canSwap(botOppositeTeam());
define showSwapHero() : inEdit() && HP().hostSelectedTarget == false && HP().hostHoverTarget == true && HP().hostHoverTarget[2] == EntityType.DummyBot;
define makeHPHud(define showHost, define text, define order ): 
CreateHudText(
    VisibleTo: showHost ? HP() : [],
    Header: null,
    Subheader: null,
    Text: text, 
    Location: Location.Top,
    SortOrder: order,
    HeaderColor: Color.White,
    SubheaderColor: Color.White,
    TextColor: Color.White,
    Reevaluation: HudTextRev.VisibleToAndString,
    Spectators: Spectators.DefaultVisibility);
disabled rule: "▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒【 Host 】▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"
{
}
rule: "Change Hosts Hero"
if(btnHeld(Button.Ability1))
if(btnHeld(Button.Reload))
{
    HP().hostSwapHeroData = [PositionOf(HP()), facingDirectionHP()];
    SetAllowedHeroes(HP(), FilteredArray(AllowedHeroes(HP()), ArrayElement() != HeroOf(HP())));
    Wait(.250);
    ResetHeroAvailability(HP());
    WaitUntil(hasSpawnedHP(), 9999);
    MinWait();
    Teleport(HP(), HP().hostSwapHeroData[0]);
    SetFacing(HP(), HP().hostSwapHeroData[1]);
    MinWait();
    HP().hostSwapHeroData = null;
}
rule: "【 Initialize 】▒▒  Host  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"
Event.OngoingPlayer
if (HP().initialize == false)
if(EventPlayer() == HP())
{
    HP().mode = ModeType.Normal;
    HP().placementDistance = 12;
    
    HP().nextBotTeam = Team.Team2;
    HP().nextBotRole = Role.All;
    HP().nextBotHero = RandomValueInArray(AllHeroes());
    makeHPHud(HP(), " ", 0);
    makeHPHud(HP(), " ", 1);
    makeHPHud(HP(), " ", 2);
    makeHPHud(HP(), " ", 3);
    makeHPHud(HP(), " ", 4);
    makeHPHud(HP(), " ", 5);
    makeHPHud(HP(), " ", 6);
    makeHPHud(HP(), " ", 7);
    makeHPHud(HP(), " ", 8);
    makeHPHud(canSeeCusorHudHP(), <"<0> <1>", showMove() ?InputBindingString(Button.SecondaryFire) : InputBindingString(Button.PrimaryFire), showMove() ? "to Drag" : "Create Bot">, 9);
    makeHPHud(showSwapTeam(), <"[<0>] Swap Team", InputBindingString(Button.Melee)>, 10);
    makeHPHud(showSwapHero(), <"[<0>] Swap Hero", InputBindingString(Button.Reload)>, 11);
    makeHPHud(showSwapHero(), <"[<0>] Remove", InputBindingString(Button.Ultimate)>, 12);
   
  HP().initialize = true;
}



